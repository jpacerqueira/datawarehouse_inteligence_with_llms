curl -X POST "http://0.0.0.0:8000/api/v1/execute_sql" \
  -H "Content-Type: application/json" \
  -d '{
    "sql": "WITH monthly_cash_inflow AS (
      SELECT 
          DATE_TRUNC('month', CAST(bp.DATE AS DATE)) AS month,
          SUM(bp.AMOUNT) AS inflow
      FROM bank_receipts bp
      GROUP BY DATE_TRUNC('month', CAST(bp.DATE AS DATE))
  ),
  monthly_cash_outflow AS (
      SELECT 
          DATE_TRUNC('month', CAST(bp.DATE AS DATE)) AS month,
          SUM(bp.AMOUNT) AS outflow
      FROM bank_payments bp
      GROUP BY DATE_TRUNC('month', CAST(bp.DATE AS DATE))
  ),
  ledger_cash_flow AS (
      SELECT 
          DATE_TRUNC('month', CAST(le.DATE AS DATE)) AS month,
          SUM(le.CR) AS credits,
          SUM(le.DR) AS debits
      FROM ledger_entries le
      JOIN ledger_accounts la ON le.LEDGER_ACCOUNT_ID = la.ID
      WHERE la.LEDGER_ACCOUNT_TYPE_ID IN (
          SELECT ID FROM ledger_account_types 
          WHERE NAME LIKE '%Cash%' OR NAME LIKE '%Bank%'
      )
      GROUP BY DATE_TRUNC('month', CAST(le.DATE AS DATE))
  ),
  all_months AS (
      SELECT DISTINCT DATE_TRUNC('month', CAST(t.DATE AS DATE)) AS month
      FROM transactions t
      
      UNION
      
      SELECT DISTINCT DATE_TRUNC('month', CAST(le.DATE AS DATE)) AS month
      FROM ledger_entries le
      
      UNION
      
      SELECT DISTINCT DATE_TRUNC('month', CAST(bp.DATE AS DATE)) AS month
      FROM bank_payments bp
      
      UNION
      
      SELECT DISTINCT DATE_TRUNC('month', CAST(br.DATE AS DATE)) AS month
      FROM bank_receipts br
  )
  
  SELECT 
      am.month,
      COALESCE(mci.inflow, 0) AS bank_receipts,
      COALESCE(mco.outflow, 0) AS bank_payments,
      COALESCE(lcf.credits, 0) AS ledger_credits,
      COALESCE(lcf.debits, 0) AS ledger_debits,
      COALESCE(mci.inflow, 0) - COALESCE(mco.outflow, 0) AS net_bank_flow,
      COALESCE(lcf.credits, 0) - COALESCE(lcf.debits, 0) AS net_ledger_flow,
      SUM(COALESCE(mci.inflow, 0) - COALESCE(mco.outflow, 0)) OVER (
          ORDER BY am.month 
          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS cumulative_bank_balance,
      SUM(COALESCE(lcf.credits, 0) - COALESCE(lcf.debits, 0)) OVER (
          ORDER BY am.month 
          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS cumulative_ledger_balance
  FROM all_months am
  LEFT JOIN monthly_cash_inflow mci ON am.month = mci.month
  LEFT JOIN monthly_cash_outflow mco ON am.month = mco.month
  LEFT JOIN ledger_cash_flow lcf ON am.month = lcf.month
  ORDER BY am.month;"
  }'